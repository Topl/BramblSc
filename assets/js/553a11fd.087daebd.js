"use strict";(self.webpackChunkbramblsc_documentation=self.webpackChunkbramblsc_documentation||[]).push([[301],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=s(a),d=l,h=m["".concat(p,".").concat(d)]||m[d]||u[d]||r;return a?n.createElement(h,i(i({ref:t},c),{},{components:a})):n.createElement(h,i({ref:t},c))}));function h(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:l,i[1]=o;for(var s=2;s<r;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},7884:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(7294),l=a(9960),r=a(6550),i=a(8084);function o(e){let{children:t,path:a}=e;var o=function(){const{pathname:e}=(0,r.TH)(),{versions:t}=(0,i.eZ)("docusaurus-plugin-content-docs");return t.find((t=>{let{path:a}=t;return e.startsWith(a)})).name||"current"}();return n.createElement(l.Z,{to:`/scaladoc/${o}/${a}`,target:"_blank"},t)}},3199:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var n=a(7462),l=(a(7294),a(3905)),r=a(7884);const i={sidebar_position:1,title:"Create a Wallet",description:"Create a new Wallet from scratch"},o=void 0,p={unversionedId:"reference/wallets/create",id:"reference/wallets/create",title:"Create a Wallet",description:"Create a new Wallet from scratch",source:"@site/docs/reference/wallets/create.mdx",sourceDirName:"reference/wallets",slug:"/reference/wallets/create",permalink:"/BramblSc/docs/current/reference/wallets/create",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Create a Wallet",description:"Create a new Wallet from scratch"},sidebar:"referenceSidebar",previous:{title:"Wallet Keys",permalink:"/BramblSc/docs/current/reference/wallets/"},next:{title:"Import a Wallet",permalink:"/BramblSc/docs/current/reference/wallets/import"}},s={},c=[{value:"Create a Wallet",id:"create-a-wallet",level:2},{value:"Example",id:"example",level:3},{value:"Create and Save a Wallet",id:"create-and-save-a-wallet",level:2},{value:"Example",id:"example-1",level:3}],m={toc:c},u="wrapper";function d(e){let{components:t,...a}=e;return(0,l.kt)(u,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Creating a wallet involves generating your Topl main key pair. This main key pair is used to derive all keys that a user would\nuse to create and prove transactions."),(0,l.kt)("h2",{id:"create-a-wallet"},"Create a Wallet"),(0,l.kt)("p",null,"You can create a new wallet using\nthe ",(0,l.kt)(r.Z,{path:"co/topl/brambl/wallet/WalletApi.html#createNewWallet(Array[Byte],Option[String],MnemonicSize):F[Either[WalletApiFailure,NewWalletResult[F]]]",mdxType:"ScaladocLink"},(0,l.kt)("code",null,"createNewWallet")),"\nfunction of a Wallet API instance."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"def createNewWallet(\n  password:   Array[Byte],\n  passphrase: Option[String] = None,\n  mLen:       MnemonicSize = MnemonicSizes.words12\n): F[Either[WalletApi.WalletApiFailure, WalletApi.NewWalletResult[F]]]\n")),(0,l.kt)("p",null,"This function generates a Topl main key pair and encrypts it with the provided password."),(0,l.kt)("p",null,"The parameters are as follows:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"password"),": The password to encrypt the main key pair with"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"passphrase"),": An optional passphrase used to generate the main key pair. The default is no passphrase."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mLen"),": The length of the mnemonic to generate. The default is 12 words.")),(0,l.kt)("p",null,"On success, this function returns\na ",(0,l.kt)(r.Z,{path:"co/topl/brambl/wallet/WalletApi$$NewWalletResult.html",mdxType:"ScaladocLink"},(0,l.kt)("code",null,"NewWalletResult")),"\nwhich contains the Topl main key pair encrypted into a ",(0,l.kt)("inlineCode",{parentName:"p"},"VaultStore")," instance, as well as the mnemonic which can be used\nto later import the derived Topl main key pair. On failure, this\nfunction returns\na ",(0,l.kt)(r.Z,{path:"co/topl/brambl/wallet/WalletApi$$WalletApiFailure.html",mdxType:"ScaladocLink"},(0,l.kt)("code",null,"WalletApiFailure")),"\nwhich specifies the reason for failure."),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"If you lose your ",(0,l.kt)("em",{parentName:"p"},"password"),", you can use your ",(0,l.kt)("em",{parentName:"p"},"passphrase")," and the generated mnemonic to recover your wallet (using import).\nIt is critical to store the used passphrase and the generated mnemonic in a safe place. If you lose either of these,\nyou will not be able to recover your wallet.")),(0,l.kt)("h3",{id:"example"},"Example"),(0,l.kt)("p",null,"The following example shows how to create a new wallet using the default of no passphrase and a mnemonic length of 12 words."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.effect.IO\nimport cats.effect.unsafe.implicits.global\nimport co.topl.brambl.wallet.WalletApi\nimport co.topl.brambl.servicekit.WalletKeyApi\n\nval walletApi = WalletApi.make[IO](WalletKeyApi.make())\n// highlight-next-line\nval newWalletResult = walletApi.createNewWallet("password".getBytes)\nnewWalletResult.unsafeRunSync()\n')),(0,l.kt)("h2",{id:"create-and-save-a-wallet"},"Create and Save a Wallet"),(0,l.kt)("p",null,"You can create a new wallet and save it to a specified Wallet Key persistence layer using\nthe ",(0,l.kt)(r.Z,{path:"co/topl/brambl/wallet/WalletApi.html#createAndSaveNewWallet[G[_]](Array[Byte],Option[String],MnemonicSize,String,String)(Monad[G],ToMonad[G]):G[Either[WalletApiFailure,NewWalletResult[F]]]",mdxType:"ScaladocLink"},(0,l.kt)("code",null,"createAndSaveNewWallet")),"\nfunction of a Wallet API instance."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'def createAndSaveNewWallet[G[_]: Monad: FunctionK[F, G]](\n  password:     Array[Byte],\n  passphrase:   Option[String] = None,\n  mLen:         MnemonicSize = MnemonicSizes.words12,\n  name:         String = "default",\n  mnemonicName: String = "mnemonic"\n): G[Either[WalletApi.WalletApiFailure, WalletApi.NewWalletResult[F]]]\n')),(0,l.kt)("p",null,"This function generates a Topl main key pair, encrypts it with the provided password, and stores it in\nthe ",(0,l.kt)("inlineCode",{parentName:"p"},"WalletKeyApiAlgebra")," used to initialize the Wallet API instance."),(0,l.kt)("p",null,"The parameters are as follows:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"password"),": The password to encrypt the main key pair with"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"passphrase"),": An optional passphrase used to generate the main key pair. The default is no passphrase."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mLen"),": The length of the mnemonic to generate. The default is 12 words."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"name"),': The name of the wallet to save. The default is "default". Most commonly, only one wallet identity will be used.'),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mnemonicName"),': The name of the mnemonic to save. The default is "mnemonic". Most commonly, only one mnemonic will be used.')),(0,l.kt)("p",null,"Type parameters:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"G"),": The context, bound to a context parameter of type ",(0,l.kt)("inlineCode",{parentName:"li"},"Monad[G]")," and transformable to ",(0,l.kt)("inlineCode",{parentName:"li"},"F")," (using Cats ",(0,l.kt)("inlineCode",{parentName:"li"},"FunctionK"),"),\nwhere ",(0,l.kt)("inlineCode",{parentName:"li"},"F")," is the type parameter used in the WalletApi instance. Most commonly, ",(0,l.kt)("inlineCode",{parentName:"li"},"G")," will be the same as ",(0,l.kt)("inlineCode",{parentName:"li"},"F")," and will be transformed\nusing ",(0,l.kt)("inlineCode",{parentName:"li"},"FunctionK.id[F]"),".")),(0,l.kt)("p",null,"On success, this function returns\na ",(0,l.kt)(r.Z,{path:"co/topl/brambl/wallet/WalletApi$$NewWalletResult.html",mdxType:"ScaladocLink"},(0,l.kt)("code",null,"NewWalletResult")),"\nwhich contains the Topl main key pair encrypted into a ",(0,l.kt)("inlineCode",{parentName:"p"},"VaultStore")," instance, as well as the mnemonic which can be used\nto later import the derived Topl main key pair. Both this ",(0,l.kt)("inlineCode",{parentName:"p"},"VaultStore")," instance and mnemonic are persisted, and can be accessed\nusing ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"mnemonicName")," respectively. On failure, this function returns\na ",(0,l.kt)(r.Z,{path:"co/topl/brambl/wallet/WalletApi$$WalletApiFailure.html",mdxType:"ScaladocLink"},(0,l.kt)("code",null,"WalletApiFailure")),"\nwhich specifies the reason for failure."),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"If you lose your ",(0,l.kt)("em",{parentName:"p"},"password"),", you can use your ",(0,l.kt)("em",{parentName:"p"},"passphrase")," and the generated mnemonic to recover your wallet (using import).\nIt is critical to store the used passphrase and the generated mnemonic in a safe place. If you lose either of these,\nyou will not be able to recover your wallet.")),(0,l.kt)("h3",{id:"example-1"},"Example"),(0,l.kt)("p",null,"The following snippet is an example of creating and saving a new wallet instance using Cats Effect\n",(0,l.kt)("inlineCode",{parentName:"p"},"IO")," and the default implementation of the ",(0,l.kt)("inlineCode",{parentName:"p"},"WalletKeyApi")," provided by\nthe ",(0,l.kt)(r.Z,{path:"co/topl/brambl/servicekit/index.html",mdxType:"ScaladocLink"},(0,l.kt)("code",null,"ServiceKit")),". This default implementation\nof the ",(0,l.kt)("inlineCode",{parentName:"p"},"WalletKeyApi")," uses the local filesystem to persist the wallet and mnemonic."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.arrow.FunctionK\nimport cats.effect.IO\nimport cats.effect.unsafe.implicits.global\nimport co.topl.brambl.wallet.WalletApi\nimport co.topl.brambl.servicekit.WalletKeyApi\n\nimport java.io.File\n\nval walletApi = WalletApi.make[IO](WalletKeyApi.make())\nimplicit val transformType: FunctionK[IO, IO] = FunctionK.id[IO]\nval homeDir = System.getProperty("user.home")\n// Replace with the desired location for your key file\nval keyFile = new File(homeDir, "mainkey.json").getCanonicalPath\n// Replace with the desired location of for your mnemonic file\nval mnemonicFile = new File(homeDir, "mnemonic.txt").getCanonicalPath\n// highlight-next-line\nval newWalletResult = walletApi.createAndSaveNewWallet[IO]("password".getBytes, name = keyFile, mnemonicName = mnemonicFile)\nnewWalletResult.unsafeRunSync()\n')))}d.isMDXComponent=!0}}]);