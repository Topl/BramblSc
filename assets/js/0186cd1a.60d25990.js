"use strict";(self.webpackChunkbramblsc_documentation=self.webpackChunkbramblsc_documentation||[]).push([[504],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(f,l(l({ref:t},p),{},{components:n})):a.createElement(f,l({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7884:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),r=n(9960),o=n(6550),l=n(8084);function i(e){let{children:t,path:n}=e;var i=function(){const{pathname:e}=(0,o.TH)(),{versions:t}=(0,l.eZ)("docusaurus-plugin-content-docs");return t.find((t=>{let{path:n}=t;return e.startsWith(n)})).name||"current"}();return a.createElement(r.Z,{to:`/scaladoc/${i}/${n}`,target:"_blank"},t)}},8554:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var a=n(7462),r=(n(7294),n(3905)),o=n(7884),l=n(9960);const i={sidebar_position:4,title:"RPC"},c=void 0,s={unversionedId:"reference/rpc",id:"reference/rpc",title:"RPC",description:"The SDK provides a set of functions to perform some common RPC calls to interact with the blockchain. To see all the RPC",source:"@site/docs/reference/rpc.mdx",sourceDirName:"reference",slug:"/reference/rpc",permalink:"/BramblSc/docs/current/reference/rpc",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"RPC"},sidebar:"referenceSidebar",previous:{title:"Wallet State",permalink:"/BramblSc/docs/current/reference/wallet-state"},next:{title:"Locks",permalink:"/BramblSc/docs/current/reference/locks/"}},p={},u=[{value:"Querying UTXOs",id:"querying-utxos",level:2},{value:"Example",id:"example",level:3},{value:"Broadcast a Transaction",id:"broadcast-a-transaction",level:2},{value:"Example",id:"example-1",level:3}],d={toc:u},m="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The SDK provides a set of functions to perform some common RPC calls to interact with the blockchain. To see all the RPC\nfunctions available on the SDK, see the Scaladoc\nfor ",(0,r.kt)(o.Z,{path:"co/topl/brambl/dataApi/BifrostQueryAlgebra",mdxType:"ScaladocLink"},(0,r.kt)("code",null,"BifrostQueryAlgebra")),"\nand ",(0,r.kt)(o.Z,{path:"co/topl/brambl/dataApi/GenusQueryAlgebra.html",mdxType:"ScaladocLink"},(0,r.kt)("code",null,"GenusQueryAlgebra")),".\nTo see all the RPC functions available on the Bifrost and Genus nodes, see the protocol buffer definitions\nfor ",(0,r.kt)(l.Z,{href:"https://github.com/Topl/protobuf-specs/blob/main/proto/node/services/bifrost_rpc.proto",mdxType:"Link"},"Bifrost"),"\nand ",(0,r.kt)(l.Z,{href:"https://github.com/Topl/protobuf-specs/blob/main/proto/genus/genus_rpc.proto",mdxType:"Link"},"Genus"),"."),(0,r.kt)("h2",{id:"querying-utxos"},"Querying UTXOs"),(0,r.kt)("p",null,"You can query the existing UTXOs on the blockchain using\nthe ",(0,r.kt)(o.Z,{path:"co/topl/brambl/dataApi/GenusQueryAlgebra.html#queryUtxo(LockAddress,TxoState):F[Seq[Txo]]",mdxType:"ScaladocLink"},(0,r.kt)("code",null,"queryUtxo")),"\nfunction of a Genus Query instance."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"def queryUtxo(fromAddress: LockAddress, txoState: TxoState = TxoState.UNSPENT): F[Seq[Txo]]\n")),(0,r.kt)("p",null,"This function queries a Genus node for all UTXOs that are encumbered by a given address and are of a specified state."),(0,r.kt)("p",null,"The parameters are as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fromAddress")," - The LockAddress of the UTXOs we are querying."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"txoState")," - The state of the UTXOs we are querying. The default value is ",(0,r.kt)("inlineCode",{parentName:"li"},"UNSPENT"),".")),(0,r.kt)("p",null,"You can initialize an instance of a Genus Query using the following snippet:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val genusQuery = GenusQueryAlgebra.make[F](channelResource)\n")),(0,r.kt)("p",null,"Where ",(0,r.kt)("inlineCode",{parentName:"p"},"F")," is a type parameter bound to a context parameter of type ",(0,r.kt)("inlineCode",{parentName:"p"},"Sync[F]")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"channelResource")," is a resource\nproviding the connection with a Genus node. See the ",(0,r.kt)("inlineCode",{parentName:"p"},"make"),"\nfunction's ",(0,r.kt)(o.Z,{path:"co/topl/brambl/dataApi/GenusQueryAlgebra$.html",mdxType:"ScaladocLink"},"signature"),"."),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("p",null,"The following example shows how to query UTXOs of a given lock address with a Cats Effect ",(0,r.kt)("inlineCode",{parentName:"p"},"IO")," context."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.effect.IO\nimport cats.effect.unsafe.implicits.global\nimport co.topl.brambl.codecs.AddressCodecs.decodeAddress\nimport co.topl.brambl.dataApi.{GenusQueryAlgebra, RpcChannelResource}\n\nval channelResource = RpcChannelResource.channelResource[IO]("localhost", 9084, false)\nval genusQuery = GenusQueryAlgebra.make[IO](channelResource)\n\n// Mock address. Replace with your address.\nval lockAddr = decodeAddress("mtetmain1y1Rqvj9PiHrsoF4VRHKscLPArgdWe44ogoiKoxwfevERNVgxLLh").toOption.get\n\n// query starts here:\n// highlight-next-line\nval txos = genusQuery.queryUtxo(lockAddr).attempt.unsafeRunSync()\n')),(0,r.kt)("h2",{id:"broadcast-a-transaction"},"Broadcast a Transaction"),(0,r.kt)("p",null,"You can broadcast a transaction to the blockchain network using\nthe ",(0,r.kt)(o.Z,{path:"co/topl/brambl/dataApi/BifrostQueryAlgebra.html#broadcastTransaction(IoTransaction):F[TransactionId]",mdxType:"ScaladocLink"},(0,r.kt)("code",null,"broadcastTransaction")),"\nfunction of a Bifrost Query instance."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"def broadcastTransaction(tx: IoTransaction): F[TransactionId]\n")),(0,r.kt)("p",null,"This function takes in the transaction to be broadcasted (given by ",(0,r.kt)("inlineCode",{parentName:"p"},"tx"),") and submits it to the Bifrost node. The ID of the\nprovided transaction is returned."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Broadcasting the transaction does not guarantee that the transaction will be included in a block. To verify if the\ntransaction was successfully included in a block you must query the Bifrost node using its Transaction ID.")),(0,r.kt)("p",null,"You can query the Bifrost node for a Transaction using\nthe ",(0,r.kt)(o.Z,{path:"co/topl/brambl/dataApi/BifrostQueryAlgebra.html#fetchTransaction(TransactionId):F[Option[IoTransaction]]",mdxType:"ScaladocLink"},(0,r.kt)("code",null,"fetchTransaction")),"\nfunction of a Bifrost Query instance."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"def fetchTransaction(txId: TransactionId): F[Option[IoTransaction]]\n")),(0,r.kt)("p",null,"This function takes in the ID of the transaction to be queried (given by ",(0,r.kt)("inlineCode",{parentName:"p"},"txId"),") and returns the transaction if it exists\non the blockchain."),(0,r.kt)("p",null,"You can initialize an instance of a Bifrost Query using the following snippet:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val bifrostQuery = BifrostQueryAlgebra.make[F](channelResource)\n")),(0,r.kt)("p",null,"Where ",(0,r.kt)("inlineCode",{parentName:"p"},"F")," is a type parameter bound to a context parameter of type ",(0,r.kt)("inlineCode",{parentName:"p"},"Sync[F]")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"channelResource")," is a resource\nproviding the connection with a Bifrost node. See the ",(0,r.kt)("inlineCode",{parentName:"p"},"make"),"\nfunction's ",(0,r.kt)(o.Z,{path:"co/topl/brambl/dataApi/BifrostQueryAlgebra$.html#make[F[_]](Resource[F,ManagedChannel])(Sync[F]):BifrostQueryAlgebra[F]",mdxType:"ScaladocLink"},"signature"),"."),(0,r.kt)("h3",{id:"example-1"},"Example"),(0,r.kt)("p",null,"The following example shows how to broadcast a proven transaction to the network and then subsequently query it from\nthe blockchain, with a Cats Effect ",(0,r.kt)("inlineCode",{parentName:"p"},"IO")," context."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.effect.IO\nimport cats.effect.unsafe.implicits.global\nimport co.topl.brambl.builders.TransactionBuilderApi\nimport co.topl.brambl.constants.NetworkConstants.{MAIN_LEDGER_ID, PRIVATE_NETWORK_ID}\nimport co.topl.brambl.builders.locks.LockTemplate\nimport co.topl.brambl.builders.locks.PropositionTemplate.HeightTemplate\nimport co.topl.brambl.builders.locks.LockTemplate.PredicateTemplate\nimport co.topl.brambl.codecs.AddressCodecs.decodeAddress\nimport co.topl.brambl.dataApi.{BifrostQueryAlgebra, GenusQueryAlgebra, RpcChannelResource}\nimport co.topl.brambl.servicekit.WalletStateResource\nimport co.topl.brambl.servicekit.{WalletKeyApi, WalletStateApi}\nimport co.topl.brambl.wallet.{CredentiallerInterpreter, WalletApi}\nimport co.topl.crypto.signing.ExtendedEd25519\nimport co.topl.brambl.syntax.cryptoToPbKeyPair\n\n// Replace with the location of your wallet state file\nval walletConnection = WalletStateResource.walletResource("wallet.db")\n\n// Some mock key pair. Do not use. Replace with your Topl main key pair.\nval mainKey = (new ExtendedEd25519).deriveKeyPairFromSeed(Array.fill(96)(0: Byte))\n\n// Replace with the address and port of your node\'s gRPC endpoint\nval channelResource = RpcChannelResource.channelResource[IO]("localhost", 9084, secureConnection = false)\n\n// Mock address. Replace with recipient address.\nval toAddr = decodeAddress("ptetP7jshHTuV9bmPmtVLm6PtUzBMZ8iYRvAxvbGTJ5VgiEPHqCCnZ8MLLdi").toOption.get\n\nval transactionBuilderApi = TransactionBuilderApi.make[IO](PRIVATE_NETWORK_ID, MAIN_LEDGER_ID)\nval predicateTemplate: LockTemplate[IO] = PredicateTemplate[IO](Seq(HeightTemplate("header", 1, Long.MaxValue)), 1)\nval walletApi = WalletApi.make[IO](WalletKeyApi.make())\nval walletStateApi = WalletStateApi.make[IO](walletConnection, walletApi)\nval credentialler = CredentiallerInterpreter.make[IO](walletApi, walletStateApi, mainKey)\nval bifrostQuery = BifrostQueryAlgebra.make[IO](channelResource)\n\nval tx = for {\n  fromLock <- predicateTemplate.build(List.empty).map(_.toOption.get)\n  fromAddr <- transactionBuilderApi.lockAddress(fromLock)\n  fromTxos <- GenusQueryAlgebra.make[IO](channelResource).queryUtxo(fromAddr)\n  unprovenTx <- transactionBuilderApi.buildTransferAllTransaction(fromTxos, fromLock.getPredicate, toAddr, toAddr, 1L)\n  provenTx <- credentialler.prove(unprovenTx.toOption.get)\n  // Broadcast starts here:\n  // highlight-next-line\n  broadcast <- bifrostQuery.broadcastTransaction(provenTx)\n} yield broadcast\n\nval txId = tx.unsafeRunSync()\n\n// Allow some time to pass before querying the transaction\nThread.sleep(1000)\n\nval postedTransaction = bifrostQuery.fetchTransaction(txId).unsafeRunSync()\n')))}f.isMDXComponent=!0}}]);