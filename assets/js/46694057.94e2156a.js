"use strict";(self.webpackChunkbramblsc_documentation=self.webpackChunkbramblsc_documentation||[]).push([[616],{3905:(e,t,l)=>{l.d(t,{Zo:()=>h,kt:()=>u});var a=l(7294);function n(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function i(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,a)}return l}function r(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?i(Object(l),!0).forEach((function(t){n(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):i(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function o(e,t){if(null==e)return{};var l,a,n=function(e,t){if(null==e)return{};var l,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)l=i[a],t.indexOf(l)>=0||(n[l]=e[l]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)l=i[a],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(n[l]=e[l])}return n}var s=a.createContext({}),p=function(e){var t=a.useContext(s),l=t;return e&&(l="function"==typeof e?e(t):r(r({},t),e)),l},h=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var l=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),c=p(l),m=n,u=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return l?a.createElement(u,r(r({ref:t},h),{},{components:l})):a.createElement(u,r({ref:t},h))}));function u(e,t){var l=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=l.length,r=new Array(i);r[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:n,r[1]=o;for(var p=2;p<i;p++)r[p]=l[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,l)}m.displayName="MDXCreateElement"},5190:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=l(7462),n=(l(7294),l(3905));const i={sidebar_position:2},r="Overview of Service Kit",o={unversionedId:"service-kit/big-picture",id:"service-kit/big-picture",title:"Overview of Service Kit",description:"The service kit is an opinionated implementation of several APIs defined",source:"@site/docs/service-kit/big-picture.md",sourceDirName:"service-kit",slug:"/service-kit/big-picture",permalink:"/BramblSc/docs/current/service-kit/big-picture",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"serviceKitSidebar",previous:{title:"The Apparatus Ecosystem",permalink:"/BramblSc/docs/current/service-kit/ecosytem"},next:{title:"Usage of the Service Kit",permalink:"/BramblSc/docs/current/service-kit/usage"}},s={},p=[{value:"The Default Implementation",id:"the-default-implementation",level:2},{value:"The Wallet Vault",id:"the-wallet-vault",level:2},{value:"The Wallet State",id:"the-wallet-state",level:2},{value:"The Default Fellowship Storage",id:"the-default-fellowship-storage",level:3},{value:"The Default Template Storage",id:"the-default-template-storage",level:3},{value:"The Default Wallet State",id:"the-default-wallet-state",level:3}],h={toc:p},c="wrapper";function d(e){let{components:t,...l}=e;return(0,n.kt)(c,(0,a.Z)({},h,l,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"overview-of-service-kit"},"Overview of Service Kit"),(0,n.kt)("p",null,"The service kit is an opinionated implementation of several APIs defined\nin the brambl-sdk. It is designed to be a simple way to get started. It provides\nimplementations for:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"FellowshipStorageAlgebra")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"TemplateStorageAlgebra")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"WalletKeyApiAlgebra")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"WalletStateAlgebra"))),(0,n.kt)("h2",{id:"the-default-implementation"},"The Default Implementation"),(0,n.kt)("p",null,"Working with the chain requires a wallet. The default implementation of the\nwallet implements HD Key derivation. This requires to keep track of the\nwallet state. "),(0,n.kt)("p",null,"The wallet, thus, has two parts:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The wallet vault"),(0,n.kt)("li",{parentName:"ul"},"The wallet state")),(0,n.kt)("h2",{id:"the-wallet-vault"},"The Wallet Vault"),(0,n.kt)("p",null,"The wallet vault is the encrypted master key. The ",(0,n.kt)("inlineCode",{parentName:"p"},"brambl-sdk")," does not impose\nany restrictions on how the vault is stored. The service kit provides a simple\nimplementation that stores the vault in an encrypted file. The functions to\ninteract with the wallet vault are defined in the ",(0,n.kt)("inlineCode",{parentName:"p"},"WalletKeyApiAlgebra")," trait. "),(0,n.kt)("h2",{id:"the-wallet-state"},"The Wallet State"),(0,n.kt)("p",null,"The wallet state keeps track of the different fellowships, templates and\ninteractions that the wallet has. The ",(0,n.kt)("inlineCode",{parentName:"p"},"brambl-sdk")," does not impose any\nrestrictions on how the state is stored. The service kit provides a simple\nimplementation that stores the state in a sqlite database file."),(0,n.kt)("p",null,"The functions to interact with the wallet state are defined in the\n",(0,n.kt)("inlineCode",{parentName:"p"},"FellowshipStorageAlgebra"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"TemplateStorageAlgebra")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"WalletStateAlgebra"),"."),(0,n.kt)("h3",{id:"the-default-fellowship-storage"},"The Default Fellowship Storage"),(0,n.kt)("p",null,"The default fellowship storage is a database table with the following schema:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS fellowships (fellowship TEXT, x_fellowship INTEGER PRIMARY KEY ASC);\nCREATE INDEX IF NOT EXISTS fellowship_names_idx ON fellowships (fellowship);\n")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"fellowship")," column is the identifier of the fellowship. The ",(0,n.kt)("inlineCode",{parentName:"p"},"x_fellowship"),"\ncolumn is the index of the fellowship in the HD wallet. By default, the\nwallet initialization procedure creates two fellowships:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO fellowships (fellowship, x_fellowship) VALUES ('nofellowship', 0);\nINSERT INTO fellowships (fellowship, x_fellowship) VALUES ('self', 1);\n")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"nofellowship")," fellowship is used for templates that don't have fellows,\nfor example, a height lock with no signature would be attached to the\n",(0,n.kt)("inlineCode",{parentName:"p"},"nofellowship")," fellowship. The ",(0,n.kt)("inlineCode",{parentName:"p"},"self")," fellowship is used for contracts where the\nonly participant is the owner of the wallet."),(0,n.kt)("h3",{id:"the-default-template-storage"},"The Default Template Storage"),(0,n.kt)("p",null,"The default template storage is a database table with the following schema:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS templates (template TEXT NOT NULL, y_template INTEGER PRIMARY KEY ASC,  lock TEXT NOT NULL);\nCREATE UNIQUE INDEX IF NOT EXISTS template_names_idx ON templates (template);\n")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"template")," column is the identifier of the template. The ",(0,n.kt)("inlineCode",{parentName:"p"},"y_template"),"\ncolumn is the index of the template in the HD wallet. The ",(0,n.kt)("inlineCode",{parentName:"p"},"lock")," column is the\nlock script of the template. By default, the wallet initialization procedure\ncreates two template:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO templates (template, y_template, lock) VALUES ('default', 1, '<encoded as JSON threshold(1, sign(0))>');\nINSERT INTO templates (template, y_template, lock) VALUES ('genesis', 2, '<encoded as JSON threshold(1, height(1, MAXLONG)>')\n")),(0,n.kt)("h3",{id:"the-default-wallet-state"},"The Default Wallet State"),(0,n.kt)("p",null,"The default wallet state, i.e. is a database table with the following schema:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS cartesian (id INTEGER PRIMARY KEY, x_fellowship INTEGER NOT NULL, y_template INTEGER NOT NULL, z_interaction INTEGER NOT NULL, lock_predicate TEXT NOT NULL, address TEXT NOT NULL, routine TEXT, vk TEXT);\nCREATE UNIQUE INDEX IF NOT EXISTS cartesian_coordinates ON cartesian (x_fellowship, y_template, z_interaction);\n")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"x_fellowship"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"y_template")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"z_interaction")," columns are the coordinates\nof the interaction in the HD wallet. The ",(0,n.kt)("inlineCode",{parentName:"p"},"lock_predicate")," column is the lock\nscript of the interaction. The ",(0,n.kt)("inlineCode",{parentName:"p"},"address")," column is the address of the\ninteraction. The ",(0,n.kt)("inlineCode",{parentName:"p"},"routine")," column is the routine of the interaction, currently\n",(0,n.kt)("inlineCode",{parentName:"p"},"ExtendedEd25519"),". The ",(0,n.kt)("inlineCode",{parentName:"p"},"vk")," is the verification key of the interaction.\nThe verification key allows us to recover the coordinates of the interaction\nfrom the ",(0,n.kt)("inlineCode",{parentName:"p"},"vk"),", which is available in the transaction."))}d.isMDXComponent=!0}}]);