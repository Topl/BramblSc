"use strict";(self.webpackChunkbramblsc_documentation=self.webpackChunkbramblsc_documentation||[]).push([[504],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),i=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=i(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=i(n),m=a,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(f,l(l({ref:t},u),{},{components:n})):r.createElement(f,l({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:a,l[1]=c;for(var i=2;i<o;i++)l[i]=n[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7884:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(7294),a=n(9960),o=n(6550),l=n(8084);function c(e){let{children:t,path:n}=e;var c=function(){const{pathname:e}=(0,o.TH)(),{versions:t}=(0,l.eZ)("docusaurus-plugin-content-docs");return t.find((t=>{let{path:n}=t;return e.startsWith(n)})).name||"current"}();return r.createElement(a.Z,{to:`/scaladoc/${c}/${n}`,target:"_blank"},t)}},8554:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>f,frontMatter:()=>c,metadata:()=>i,toc:()=>p});var r=n(7462),a=(n(7294),n(3905)),o=n(7884),l=n(9960);const c={sidebar_position:3,title:"RPC"},s=void 0,i={unversionedId:"reference/rpc",id:"reference/rpc",title:"RPC",description:"The SDK provides a set of functions to perform some common RPC calls to interact with the blockchain. To see all the RPC",source:"@site/docs/reference/rpc.mdx",sourceDirName:"reference",slug:"/reference/rpc",permalink:"/BramblSc/docs/current/reference/rpc",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"RPC"},sidebar:"referenceSidebar",previous:{title:"Import a Wallet",permalink:"/BramblSc/docs/current/reference/wallets/import"},next:{title:"Locks",permalink:"/BramblSc/docs/current/reference/locks/"}},u={},p=[{value:"Querying UTXOs",id:"querying-utxos",level:2},{value:"Example",id:"example",level:3}],d={toc:p},m="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The SDK provides a set of functions to perform some common RPC calls to interact with the blockchain. To see all the RPC\nfunctions available on the SDK, see the Scaladoc\nfor ",(0,a.kt)(o.Z,{path:"co/topl/brambl/dataApi/BifrostQueryAlgebra",mdxType:"ScaladocLink"},(0,a.kt)("code",null,"BifrostQueryAlgebra")),"\nand ",(0,a.kt)(o.Z,{path:"co/topl/brambl/dataApi/GenusQueryAlgebra.html",mdxType:"ScaladocLink"},(0,a.kt)("code",null,"GenusQueryAlgebra")),".\nTo see all the RPC functions available on the Bifrost and Genus nodes, see the protocol buffer definitions\nfor ",(0,a.kt)(l.Z,{href:"https://github.com/Topl/protobuf-specs/blob/main/proto/node/services/bifrost_rpc.proto",mdxType:"Link"},"Bifrost"),"\nand ",(0,a.kt)(l.Z,{href:"https://github.com/Topl/protobuf-specs/blob/main/proto/genus/genus_rpc.proto",mdxType:"Link"},"Genus"),"."),(0,a.kt)("h2",{id:"querying-utxos"},"Querying UTXOs"),(0,a.kt)("p",null,"You can query the existing UTXOs on the blockchain using the ",(0,a.kt)("inlineCode",{parentName:"p"},"queryUtxo")," function of a Genus Query instance."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"def queryUtxo(fromAddress: LockAddress, txoState: TxoState = TxoState.UNSPENT): F[Seq[Txo]]\n")),(0,a.kt)("p",null,"This function queries a Genus node for all UTXOs that are encumbered by a given address and are of a specified state."),(0,a.kt)("p",null,"The parameters are as follows:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"fromAddress")," - The LockAddress of the UTXOs we are querying."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"txoState")," - The state of the UTXOs we are querying. The default value is ",(0,a.kt)("inlineCode",{parentName:"li"},"UNSPENT"),".")),(0,a.kt)("p",null,"You can initialize an instance of a Genus Query using the following snippet:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"val genusQuery = GenusQueryAlgebra.make[F](channelResource)\n")),(0,a.kt)("p",null,"Where ",(0,a.kt)("inlineCode",{parentName:"p"},"F")," is a type parameter bound to a context parameter of type ",(0,a.kt)("inlineCode",{parentName:"p"},"Sync[F]")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"channelResource")," is a resource\nproviding the connection with a Genus node. See the ",(0,a.kt)("inlineCode",{parentName:"p"},"make"),"\nfunction's ",(0,a.kt)(o.Z,{path:"co/topl/brambl/dataApi/GenusQueryAlgebra$.html",mdxType:"ScaladocLink"},"signature"),"."),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("p",null,"The following examples shows how to query UTXOs of a given lock address with a Cats Effect ",(0,a.kt)("inlineCode",{parentName:"p"},"IO")," context."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.effect.IO\nimport cats.effect.unsafe.implicits.global\nimport co.topl.brambl.codecs.AddressCodecs.decodeAddress\nimport co.topl.brambl.dataApi.{GenusQueryAlgebra, RpcChannelResource}\n\nval channelResource = RpcChannelResource.channelResource[IO]("localhost", 9084, false)\nval genusQuery = GenusQueryAlgebra.make[IO](channelResource)\n\n// Mock address. Replace with your address.\nval lockAddr = decodeAddress("mtetmain1y1Rqvj9PiHrsoF4VRHKscLPArgdWe44ogoiKoxwfevERNVgxLLh").toOption.get\n\n// query starts here:\nval txos = genusQuery.queryUtxo(lockAddr).attempt.unsafeRunSync()\n')))}f.isMDXComponent=!0}}]);