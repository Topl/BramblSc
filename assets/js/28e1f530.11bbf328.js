"use strict";(self.webpackChunkbramblsc_documentation=self.webpackChunkbramblsc_documentation||[]).push([[429],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(f,l(l({ref:t},p),{},{components:n})):a.createElement(f,l({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8482:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:3},l="Usage of the Service Kit",o={unversionedId:"service-kit/usage",id:"service-kit/usage",title:"Usage of the Service Kit",description:"In this document we are showing how to use the service kit to interact with the",source:"@site/docs/service-kit/usage.md",sourceDirName:"service-kit",slug:"/service-kit/usage",permalink:"/BramblSc/docs/current/service-kit/usage",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"serviceKitSidebar",previous:{title:"Overview of Service Kit",permalink:"/BramblSc/docs/current/service-kit/big-picture"}},s={},c=[{value:"Creating a Vault and a Wallet Database",id:"creating-a-vault-and-a-wallet-database",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"usage-of-the-service-kit"},"Usage of the Service Kit"),(0,r.kt)("p",null,"In this document we are showing how to use the service kit to interact with the\nTopl Network. We will be showing code snippets in Scala."),(0,r.kt)("h2",{id:"creating-a-vault-and-a-wallet-database"},"Creating a Vault and a Wallet Database"),(0,r.kt)("p",null,"The first step is to create a vault. The vault is where the master key is stored."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'// You can run this code using scala-cli. Save it in a file called `create-vault.sc` and run it with `scala-cli create-vault.sc`\n//> using scala 2.13\n//> using repository sonatype-s01:releases\n//> using dep co.topl::service-kit:2.0.0-alpha7\n//> using dep org.typelevel::cats-core:2.10.0\n\nimport cats.effect.kernel.Resource\nimport cats.effect.IO\nimport co.topl.brambl.wallet.WalletApi\nimport co.topl.brambl.servicekit.WalletStateApi\nimport co.topl.brambl.constants.NetworkConstants\nimport co.topl.brambl.servicekit.WalletKeyApi\nimport java.sql.{Connection, DriverManager}\nimport cats.effect.std\nimport io.circe.syntax._\nimport co.topl.crypto.encryption.VaultStore.Codecs._\nimport cats.effect.unsafe.implicits.global\nimport java.io.File\n\ncase class CreateWallet(\n  file: String,\n  password: String\n) {\n  def walletResource(name: String): Resource[IO, Connection] = Resource\n    .make(\n      IO.delay(\n        DriverManager.getConnection(\n          s"jdbc:sqlite:${name}"\n        )\n      )\n    )(conn => IO.delay(conn.close()))\n  val walletKeyApi = WalletKeyApi.make[IO]()\n  val walletApi = WalletApi.make(walletKeyApi)\n  \n  val walletStateApi = WalletStateApi\n    .make[IO](\n      walletResource(file),\n      walletApi\n    )\n  \n  val createWallet = for {\n    wallet <- walletApi\n      .createNewWallet(\n        password.getBytes(),\n        Some("passphrase")\n      )\n      .map(_.fold(throw _, identity))\n    keyPair <- walletApi\n      .extractMainKey(\n        wallet.mainKeyVaultStore,\n        password.getBytes()\n      )\n      .flatMap(\n        _.fold(\n          _ =>\n            IO.raiseError(\n              new Throwable("No input file (should not happen)")\n            ),\n          IO(_)\n        )\n      )\n    _ <- std.Console[IO].println("Wallet: " + new String(wallet.mainKeyVaultStore.asJson.noSpaces))\n    _ <- std.Console[IO].println("Mnemonic: "+ wallet.mnemonic.mkString(","))\n    derivedKey <- walletApi.deriveChildKeysPartial(keyPair, 1, 1)\n    _ <- walletStateApi.initWalletState(\n      NetworkConstants.PRIVATE_NETWORK_ID,\n      NetworkConstants.MAIN_LEDGER_ID,\n      derivedKey.vk\n    )\n  } yield ()\n\n}\n\nval file = "myWallet.db"\nval password = "password"\n// we delete the wallet before creating it\nnew File(file).delete()\n\n// run using:\nCreateWallet(file, password).createWallet.unsafeRunSync()\n')),(0,r.kt)("p",null,"This will create an encrypted vault and print it to the console. The vault is\nencrypted with the password provided. It will also create a wallet state database\nfile called ",(0,r.kt)("inlineCode",{parentName:"p"},"myWallet.db")," and print the mnemonic to recover the wallet to the\nstandard ouput."),(0,r.kt)("p",null,"This code has several parts:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"first, it creates a wallet in memory (the ",(0,r.kt)("inlineCode",{parentName:"li"},"walletApi.createNewWallet")," function)"),(0,r.kt)("li",{parentName:"ul"},"then, it extracts the main key from the wallet (the ",(0,r.kt)("inlineCode",{parentName:"li"},"walletApi.extractMainKey")," function)"),(0,r.kt)("li",{parentName:"ul"},"then, it derives a child key from the main key (the ",(0,r.kt)("inlineCode",{parentName:"li"},"walletApi.deriveChildKeysPartial")," function),\nthis is needed to initialized the wallet database"),(0,r.kt)("li",{parentName:"ul"},"finally, it initializes the wallet database (the ",(0,r.kt)("inlineCode",{parentName:"li"},"walletStateApi.initWalletState")," function)")))}d.isMDXComponent=!0}}]);