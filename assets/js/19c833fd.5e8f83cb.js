"use strict";(self.webpackChunkbramblsc_documentation=self.webpackChunkbramblsc_documentation||[]).push([[657],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=s(n),u=i,h=c["".concat(p,".").concat(u)]||c[u]||d[u]||l;return n?a.createElement(h,r(r({ref:t},m),{},{components:n})):a.createElement(h,r({ref:t},m))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[c]="string"==typeof e?e:i,r[1]=o;for(var s=2;s<l;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7884:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),i=n(9960),l=n(6550),r=n(8084);function o(e){let{children:t,path:n}=e;var o=function(){const{pathname:e}=(0,l.TH)(),{versions:t}=(0,r.eZ)("docusaurus-plugin-content-docs");return t.find((t=>{let{path:n}=t;return e.startsWith(n)})).name||"current"}();return a.createElement(i.Z,{to:`/scaladoc/${o}/${n}`,target:"_blank"},t)}},3998:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>p,toc:()=>m});var a=n(7462),i=(n(7294),n(3905)),l=n(7884);const r={sidebar_position:2,title:"Import a Wallet",description:"Import an existing Wallet"},o=void 0,p={unversionedId:"reference/wallets/import",id:"reference/wallets/import",title:"Import a Wallet",description:"Import an existing Wallet",source:"@site/docs/reference/wallets/import.mdx",sourceDirName:"reference/wallets",slug:"/reference/wallets/import",permalink:"/BramblSc/docs/current/reference/wallets/import",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Import a Wallet",description:"Import an existing Wallet"},sidebar:"referenceSidebar",previous:{title:"Create a Wallet",permalink:"/BramblSc/docs/current/reference/wallets/create"},next:{title:"Usage",permalink:"/BramblSc/docs/current/reference/wallets/usage"}},s={},m=[{value:"Import a Wallet",id:"import-a-wallet",level:2},{value:"Example",id:"example",level:3},{value:"Import and Save a Wallet",id:"import-and-save-a-wallet",level:2},{value:"Example",id:"example-1",level:3}],c={toc:m},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,'Importing a wallet involves generating your existing main key pair using your passphrase and your previously-derived mnemonic.\nThis is also referred to as "Recovering a Wallet". If you do not have an existing wallet to import (or recover), see\n',(0,i.kt)("a",{parentName:"p",href:"./create"},"Create a Wallet"),"."),(0,i.kt)("h2",{id:"import-a-wallet"},"Import a Wallet"),(0,i.kt)("p",null,"You can import your wallet using\nthe ",(0,i.kt)(l.Z,{path:"co/topl/brambl/wallet/WalletApi.html#importWallet(IndexedSeq[String],Array[Byte],Option[String]):F[Either[WalletApiFailure,VaultStore[F]]]",mdxType:"ScaladocLink"},(0,i.kt)("code",null,"importWallet")),"\nfunction of a Wallet API instance."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"def importWallet(\n  mnemonic:   IndexedSeq[String],\n  password:   Array[Byte],\n  passphrase: Option[String] = None\n): F[Either[WalletApi.WalletApiFailure, VaultStore[F]]]\n")),(0,i.kt)("p",null,"This function generates the main key pair associated to the mnemonic and passphrase, and encrypts it with the provided password."),(0,i.kt)("p",null,"The parameters are as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mnemonic"),": The mnemonic used to regenerate the existing main key pair"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"password"),": The password to encrypt the generated main key pair with"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"passphrase"),": An optional passphrase used to regenerate the existing main key pair. The default is no passphrase.")),(0,i.kt)("p",null,"On success, this function returns the regenerated main key pair encrypted into a ",(0,i.kt)("inlineCode",{parentName:"p"},"VaultStore")," instance. On failure, this\nfunction returns\na ",(0,i.kt)(l.Z,{path:"co/topl/brambl/wallet/WalletApi$$WalletApiFailure.html",mdxType:"ScaladocLink"},(0,i.kt)("code",null,"WalletApiFailure")),"\nwhich specifies the reason for failure."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The provided mnemonic and passphrase ",(0,i.kt)("strong",{parentName:"p"},"must")," be the same as the mnemonic and passphrase used to generate the original main key pair.\nThe password could be different.")),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("p",null,"The following example shows how to import an existing wallet using a mnemonic. This example assumes that no passphrase\nwas used in the initial creation of the existing wallet."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.effect.IO\nimport cats.effect.unsafe.implicits.global\nimport co.topl.brambl.wallet.WalletApi\nimport co.topl.brambl.servicekit.WalletKeyApi\n\nval walletApi = WalletApi.make[IO](WalletKeyApi.make())\n\n// Some mock mnemonic. Replace with your own.\nval someMnemonic = "ozone drill grab fiber curtain grace pudding thank cruise elder eight picnic"\n\n// highlight-next-line\nval recoverWalletResult = walletApi.importWallet(someMnemonic.split(" "), "password".getBytes)\nrecoverWalletResult.unsafeRunSync()\n')),(0,i.kt)("h2",{id:"import-and-save-a-wallet"},"Import and Save a Wallet"),(0,i.kt)("p",null,"You can import an existing wallet and save it to a specified Wallet Key persistence layer using\nthe ",(0,i.kt)(l.Z,{path:"co/topl/brambl/wallet/WalletApi.html#importWalletAndSave[G[_]](IndexedSeq[String],Array[Byte],Option[String],String)(Monad[G],ToMonad[G]):G[Either[WalletApiFailure,VaultStore[F]]]",mdxType:"ScaladocLink"},(0,i.kt)("code",null,"importWalletAndSave")),"\nfunction of a Wallet API instance."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'def importWalletAndSave[G[_]: Monad: FunctionK[F, G]](\n  mnemonic:   IndexedSeq[String],\n  password:   Array[Byte],\n  passphrase: Option[String] = None,\n  name:       String = "default"\n): G[Either[WalletApi.WalletApiFailure, VaultStore[F]]]\n')),(0,i.kt)("p",null,"This function generates the main key pair associated to the mnemonic and passphrase, encrypts it with the provided\npassword, and stores it in the ",(0,i.kt)("inlineCode",{parentName:"p"},"WalletKeyApiAlgebra")," used to initialize the Wallet API instance."),(0,i.kt)("p",null,"The parameters are as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mnemonic"),": The mnemonic used to regenerate the existing main key pair"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"password"),": The password to encrypt the generated main key pair with"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"passphrase"),": An optional passphrase used to regenerate the existing main key pair. The default is no passphrase."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name"),': The name of the wallet to save. The default is "default". Most commonly, only one wallet identity will be used.')),(0,i.kt)("p",null,"Type parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"G"),": The context, bound to a context parameter of type ",(0,i.kt)("inlineCode",{parentName:"li"},"Monad[G]")," and transformable to ",(0,i.kt)("inlineCode",{parentName:"li"},"F")," (using Cats ",(0,i.kt)("inlineCode",{parentName:"li"},"FunctionK"),"),\nwhere ",(0,i.kt)("inlineCode",{parentName:"li"},"F")," is the type parameter used in the WalletApi instance. Most commonly, ",(0,i.kt)("inlineCode",{parentName:"li"},"G")," will be the same as ",(0,i.kt)("inlineCode",{parentName:"li"},"F")," and will be transformed\nusing ",(0,i.kt)("inlineCode",{parentName:"li"},"FunctionK.id[F]"),".")),(0,i.kt)("p",null,"On success, this function returns the regenerated main key pair encrypted into a ",(0,i.kt)("inlineCode",{parentName:"p"},"VaultStore")," instance. This\n",(0,i.kt)("inlineCode",{parentName:"p"},"VaultStore")," instance is persisted and can be later accessed using the specified ",(0,i.kt)("inlineCode",{parentName:"p"},"name"),". On failure, this function returns\na ",(0,i.kt)(l.Z,{path:"co/topl/brambl/wallet/WalletApi$$WalletApiFailure.html",mdxType:"ScaladocLink"},(0,i.kt)("code",null,"WalletApiFailure")),"\nwhich specifies the reason for failure."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The provided mnemonic and passphrase ",(0,i.kt)("strong",{parentName:"p"},"must")," be the same as the mnemonic and passphrase used to generate the original main key pair.\nThe password could be different.")),(0,i.kt)("h3",{id:"example-1"},"Example"),(0,i.kt)("p",null,"The following snippet is an example of importing and saving an existing wallet (given by a mnemonic) using Cats Effect\n",(0,i.kt)("inlineCode",{parentName:"p"},"IO")," and the default implementation of the ",(0,i.kt)("inlineCode",{parentName:"p"},"WalletKeyApi")," provided by\nthe ",(0,i.kt)(l.Z,{path:"co/topl/brambl/servicekit/index.html",mdxType:"ScaladocLink"},(0,i.kt)("code",null,"ServiceKit")),". This default implementation\nof the ",(0,i.kt)("inlineCode",{parentName:"p"},"WalletKeyApi")," uses the local filesystem to persist the wallet and mnemonic."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.arrow.FunctionK\nimport cats.effect.IO\nimport cats.effect.unsafe.implicits.global\nimport co.topl.brambl.wallet.WalletApi\nimport co.topl.brambl.servicekit.WalletKeyApi\n\nimport java.io.File\n\nval walletApi = WalletApi.make[IO](WalletKeyApi.make())\n\n// Some mock mnemonic. Replace with your own.\nval someMnemonic = "ozone drill grab fiber curtain grace pudding thank cruise elder eight picnic"\n\nimplicit val transformType: FunctionK[IO, IO] = FunctionK.id[IO]\nval homeDir = System.getProperty("user.home")\n// Replace with the desired location for your key file\nval keyFile = new File(homeDir, "mainkey.json").getCanonicalPath\n// highlight-next-line\nval newWalletResult = walletApi.importWalletAndSave[IO](someMnemonic.split(" "), "password".getBytes, name = keyFile)\nnewWalletResult.unsafeRunSync()\n')))}u.isMDXComponent=!0}}]);