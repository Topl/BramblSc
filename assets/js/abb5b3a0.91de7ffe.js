"use strict";(self.webpackChunkbramblsc_documentation=self.webpackChunkbramblsc_documentation||[]).push([[756],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>y});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=s(a),u=l,y=d["".concat(p,".").concat(u)]||d[u]||m[u]||i;return a?n.createElement(y,r(r({ref:t},c),{},{components:a})):n.createElement(y,r({ref:t},c))}));function y(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=a.length,r=new Array(i);r[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[d]="string"==typeof e?e:l,r[1]=o;for(var s=2;s<i;s++)r[s]=a[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},7884:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(7294),l=a(9960),i=a(6550),r=a(8084);function o(e){let{children:t,path:a}=e;var o=function(){const{pathname:e}=(0,i.TH)(),{versions:t}=(0,r.eZ)("docusaurus-plugin-content-docs");return t.find((t=>{let{path:a}=t;return e.startsWith(a)})).name||"current"}();return n.createElement(l.Z,{to:`/scaladoc/${o}/${a}`,target:"_blank"},t)}},384:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>p,toc:()=>c});var n=a(7462),l=(a(7294),a(3905)),i=a(7884);const r={sidebar_position:3,title:"Usage",description:"Use a Wallet to generate keys"},o=void 0,p={unversionedId:"reference/wallets/usage",id:"reference/wallets/usage",title:"Usage",description:"Use a Wallet to generate keys",source:"@site/docs/reference/wallets/usage.mdx",sourceDirName:"reference/wallets",slug:"/reference/wallets/usage",permalink:"/BramblSc/docs/current/reference/wallets/usage",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Usage",description:"Use a Wallet to generate keys"},sidebar:"referenceSidebar",previous:{title:"Import a Wallet",permalink:"/BramblSc/docs/current/reference/wallets/import"},next:{title:"Wallet State",permalink:"/BramblSc/docs/current/reference/wallet-state"}},s={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Decrypt a Topl Main Key Pair",id:"decrypt-a-topl-main-key-pair",level:2},{value:"Example",id:"example",level:3},{value:"Load and Decrypt a Topl Main Key Pair",id:"load-and-decrypt-a-topl-main-key-pair",level:2},{value:"Example",id:"example-1",level:3},{value:"Derive a Child Key Pair",id:"derive-a-child-key-pair",level:2},{value:"Example",id:"example-2",level:3}],d={toc:c},m="wrapper";function u(e){let{components:t,...a}=e;return(0,l.kt)(m,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,'With a wallet, you can generate key pairs for use in the Topl network. Topl uses ExtendedEd25519 for our implementation\nof a hierarchical deterministic (HD) wallet. Using an HD wallet, you can derive many keys for a given "main" key.\nThis page will walk you through the process of accessing your Topl main key pair as well as deriving child key pairs for a\n3-layer path (x/y/z).'),(0,l.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,l.kt)("p",null,"To use a wallet, a wallet instance must exist. To create a wallet instance, read ",(0,l.kt)("a",{parentName:"p",href:"./create"},"Create a Wallet"),"\nor ",(0,l.kt)("a",{parentName:"p",href:"./import"},"Import a Wallet"),". The following snippet is an example of creating a new wallet instance using Cats Effect\n",(0,l.kt)("inlineCode",{parentName:"p"},"IO")," and the default implementation of\nthe ",(0,l.kt)(i.Z,{path:"co/topl/brambl/servicekit/index.html",mdxType:"ScaladocLink"},(0,l.kt)("code",null,"ServiceKit")),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.effect.IO\nimport co.topl.brambl.wallet.WalletApi\nimport co.topl.brambl.servicekit.WalletKeyApi\n\nval password = "password".getBytes\nval walletApi = WalletApi.make[IO](WalletKeyApi.make())\nval newWalletResult = walletApi.createNewWallet(password)\n')),(0,l.kt)("h2",{id:"decrypt-a-topl-main-key-pair"},"Decrypt a Topl Main Key Pair"),(0,l.kt)("p",null,"During wallet initialization, a Topl main key pair is generated and encrypted in a ",(0,l.kt)("inlineCode",{parentName:"p"},"VaultStore"),". To use this key pair\nyou must first decrypt it by extracting it from the ",(0,l.kt)("inlineCode",{parentName:"p"},"VaultStore"),". This can be achieved by using\nthe ",(0,l.kt)(i.Z,{path:"co/topl/brambl/wallet/WalletApi.html#extractMainKey(VaultStore[F],Array[Byte]):F[Either[WalletApiFailure,KeyPair]]",mdxType:"ScaladocLink"},(0,l.kt)("code",null,"extractMainKey")),"\nfunction of a Wallet API instance."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"def extractMainKey(\n  vaultStore: VaultStore[F],\n  password:   Array[Byte]\n): F[Either[WalletApi.WalletApiFailure, KeyPair]]\n")),(0,l.kt)("p",null,"This function extracts and decrypts the Topl main key pair from the given encrypted ",(0,l.kt)("inlineCode",{parentName:"p"},"VaultStore")," using the given password."),(0,l.kt)("p",null,"The parameters are as follows:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"vaultStore"),": The encrypted ",(0,l.kt)("inlineCode",{parentName:"li"},"VaultStore")," containing the Topl main key pair."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"password"),": The password used to encrypt the ",(0,l.kt)("inlineCode",{parentName:"li"},"VaultStore"),".")),(0,l.kt)("p",null,"On success, the function returns the decrypted Topl\nmain ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/Topl/protobuf-specs/blob/main/proto/quivr/models/shared.proto#L78"},"key pair"),". On failure, the function returns\na ",(0,l.kt)(i.Z,{path:"co/topl/brambl/wallet/WalletApi$$WalletApiFailure.html",mdxType:"ScaladocLink"},(0,l.kt)("code",null,"WalletApiFailure")),"\nwhich specifies the reason for failure."),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"For maximum security, the Topl main key pair should never be used to create and prove transactions. Instead, use a\nchild key pair derived from the Topl main key pair.")),(0,l.kt)("h3",{id:"example"},"Example"),(0,l.kt)("p",null,"The following example shows how to extract the Topl main key pair after initializing a wallet."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.effect.IO\nimport cats.effect.unsafe.implicits.global\nimport co.topl.brambl.wallet.WalletApi\nimport co.topl.brambl.servicekit.WalletKeyApi\n\nval password = "password".getBytes\nval walletApi = WalletApi.make[IO](WalletKeyApi.make())\n\nval mainKey = for {\n  newWallet <- walletApi.createNewWallet(password)\n  // highlight-next-line\n  decryptedKey <- walletApi.extractMainKey(newWallet.toOption.get.mainKeyVaultStore, password)\n} yield decryptedKey.toOption.get\n\nmainKey.unsafeRunSync()\n')),(0,l.kt)("h2",{id:"load-and-decrypt-a-topl-main-key-pair"},"Load and Decrypt a Topl Main Key Pair"),(0,l.kt)("p",null,"If your wallet was saved to the Wallet Key persistence layer during wallet initialization (for example, by\nusing ",(0,l.kt)("a",{parentName:"p",href:"./create#create-and-save-a-wallet"},"Create and Save a Wallet")," or ",(0,l.kt)("a",{parentName:"p",href:"./import#import-and-save-a-wallet"},"Import and Save a Wallet"),"),\nyour Topl main key pair can be loaded and decrypted in a single step. This can be achieved by using\nthe ",(0,l.kt)(i.Z,{path:"co/topl/brambl/wallet/WalletApi.html#loadAndExtractMainKey[G[_]](Array[Byte],String)(Monad[G],ToMonad[G]):G[Either[WalletApiFailure,KeyPair]]",mdxType:"ScaladocLink"},(0,l.kt)("code",null,"loadAndExtractMainKey")),"\nfunction of a Wallet API instance."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'def loadAndExtractMainKey[G[_]: Monad: FunctionK[F, G]](\n  password: Array[Byte],\n  name:     String = "default"\n): G[Either[WalletApi.WalletApiFailure, KeyPair]]\n')),(0,l.kt)("p",null,"This function loads an encrypted wallet (specified by ",(0,l.kt)("inlineCode",{parentName:"p"},"name"),") from the ",(0,l.kt)("inlineCode",{parentName:"p"},"WalletKeyApiAlgebra")," used to initialize the\nWallet API, and then extracts and decrypts the Topl main key pair contained within it using the given password."),(0,l.kt)("p",null,"The parameters are as follows:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"password"),": The password used to encrypt the ",(0,l.kt)("inlineCode",{parentName:"li"},"VaultStore"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"name"),': The name of the wallet to load. Defaults to "default".')),(0,l.kt)("p",null,"Type parameters:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"G"),": The context, bound to a context parameter of type ",(0,l.kt)("inlineCode",{parentName:"li"},"Monad[G]")," and transformable to ",(0,l.kt)("inlineCode",{parentName:"li"},"F")," (using Cats ",(0,l.kt)("inlineCode",{parentName:"li"},"FunctionK"),"),\nwhere ",(0,l.kt)("inlineCode",{parentName:"li"},"F")," is the type parameter used in the WalletApi instance. Most commonly, ",(0,l.kt)("inlineCode",{parentName:"li"},"G")," will be the same as ",(0,l.kt)("inlineCode",{parentName:"li"},"F")," and will be transformed\nusing ",(0,l.kt)("inlineCode",{parentName:"li"},"FunctionK.id[F]"),".")),(0,l.kt)("p",null,"On success, the function returns the decrypted Topl\nmain ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/Topl/protobuf-specs/blob/main/proto/quivr/models/shared.proto#L78"},"key pair"),". On failure, the function returns\na ",(0,l.kt)(i.Z,{path:"co/topl/brambl/wallet/WalletApi$$WalletApiFailure.html",mdxType:"ScaladocLink"},(0,l.kt)("code",null,"WalletApiFailure")),"\nwhich specifies the reason for failure."),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"For maximum security, the Topl main key pair should never be used to create and prove transactions. Instead, use a\nchild key pair derived from the Topl main key pair.")),(0,l.kt)("h3",{id:"example-1"},"Example"),(0,l.kt)("p",null,"The following example shows how to load a wallet and extract its Topl main key pair after previously persisting it using\nthe default implementation of the ",(0,l.kt)("inlineCode",{parentName:"p"},"WalletKeyApi")," provided by\nthe ",(0,l.kt)(i.Z,{path:"co/topl/brambl/servicekit/index.html",mdxType:"ScaladocLink"},(0,l.kt)("code",null,"ServiceKit")),". This default implementation\nof the ",(0,l.kt)("inlineCode",{parentName:"p"},"WalletKeyApi")," uses the local filesystem to persist the wallet and mnemonic.."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.arrow.FunctionK\nimport cats.effect.IO\nimport cats.effect.unsafe.implicits.global\nimport co.topl.brambl.wallet.WalletApi\nimport co.topl.brambl.servicekit.WalletKeyApi\n\nimport java.io.File\n\nval walletApi = WalletApi.make[IO](WalletKeyApi.make())\nimplicit val transformType: FunctionK[IO, IO] = FunctionK.id[IO]\n\nval homeDir = System.getProperty("user.home")\n// Replace with the desired location for your key file\nval keyFile = new File(homeDir, "mainkey.json").getCanonicalPath\n// Replace with the desired location of for your mnemonic file\nval mnemonicFile = new File(homeDir, "mnemonic.txt").getCanonicalPath\n\nval password = "password".getBytes\n\nwalletApi.createAndSaveNewWallet[IO](password, name = keyFile, mnemonicName = mnemonicFile).unsafeRunSync()\n\n// Load and extract begins here:\nval mainKey = for {\n  // highlight-next-line\n  decryptedKey <- walletApi.loadAndExtractMainKey[IO](password, keyFile)\n} yield decryptedKey.toOption.get\nmainKey.unsafeRunSync()\n')),(0,l.kt)("h2",{id:"derive-a-child-key-pair"},"Derive a Child Key Pair"),(0,l.kt)("p",null,"The Topl main key pair should not be used to create and prove transactions. For this, a child key pair should be used.\nYou can derive this child key pair using\nthe ",(0,l.kt)(i.Z,{path:"co/topl/brambl/wallet/WalletApi.html#deriveChildKeys(KeyPair,Indices):F[KeyPair]",mdxType:"ScaladocLink"},(0,l.kt)("code",null,"deriveChildKeys")),"\nfunction of a Wallet API instance."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"def deriveChildKeys(\n  keyPair: KeyPair,\n  idx:     Indices\n): F[KeyPair]\n")),(0,l.kt)("p",null,"This function derives a child key pair from the given Topl main key pair using the given indices. The indices contain the\n3-layer path (x/y/z) for the child key pair. For a more formal definition of the derivation paths,\nsee ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/Topl/tips/tree/main/TIP-0004"},"TIP-0004"),". For the most basic use case, the ",(0,l.kt)("inlineCode",{parentName:"p"},"x/y")," path can be hardcoded\nto a constant value (for ex. ",(0,l.kt)("inlineCode",{parentName:"p"},"10/10"),") and the ",(0,l.kt)("inlineCode",{parentName:"p"},"z")," path can be incremented for each new child key pair needed."),(0,l.kt)("p",null,"The parameters are as follows:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"keyPair"),": The Topl main key pair to derive the child key pair from."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"idx"),": The indices containing the 3-layer path (x/y/z) for the child key pair.")),(0,l.kt)("p",null,"This function returns the derived child ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/Topl/protobuf-specs/blob/main/proto/quivr/models/shared.proto#L78"},"key pair"),"."),(0,l.kt)("h3",{id:"example-2"},"Example"),(0,l.kt)("p",null,"The following example shows how to derive 2 different child key pairs from the Topl main key pair."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.effect.IO\nimport cats.effect.unsafe.implicits.global\nimport co.topl.brambl.models.Indices\nimport co.topl.brambl.wallet.WalletApi\nimport co.topl.brambl.servicekit.WalletKeyApi\n\nval password = "password".getBytes\nval walletApi = WalletApi.make[IO](WalletKeyApi.make())\n\nval mainKey = (for {\n  newWallet <- walletApi.createNewWallet(password)\n  decryptedKey <- walletApi.extractMainKey(newWallet.toOption.get.mainKeyVaultStore, password)\n} yield decryptedKey.toOption.get).unsafeRunSync()\n\n// highlight-start\nval childKey1 = walletApi.deriveChildKeys(mainKey, Indices(10, 10, 0)).unsafeRunSync()\nval childKey2 = walletApi.deriveChildKeys(mainKey, Indices(10, 10, 1)).unsafeRunSync()\n// highlight-end\n')))}u.isMDXComponent=!0}}]);