"use strict";(self.webpackChunkbramblsc_documentation=self.webpackChunkbramblsc_documentation||[]).push([[259],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=p(n),u=o,k=m["".concat(i,".").concat(u)]||m[u]||d[u]||r;return n?a.createElement(k,l(l({ref:t},s),{},{components:n})):a.createElement(k,l({ref:t},s))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=u;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[m]="string"==typeof e?e:o,l[1]=c;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7884:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(7294),o=n(9960),r=n(6550),l=n(8084);function c(e){let{children:t,path:n}=e;var c=function(){const{pathname:e}=(0,r.TH)(),{versions:t}=(0,l.eZ)("docusaurus-plugin-content-docs");return t.find((t=>{let{path:n}=t;return e.startsWith(n)})).name||"current"}();return a.createElement(o.Z,{to:`/scaladoc/${c}/${n}`,target:"_blank"},t)}},429:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var a=n(7462),o=(n(7294),n(3905)),r=n(7884);const l={sidebar_position:5,title:"Share a Lock Template",description:"Share a Lock Template as JSON."},c=void 0,i={unversionedId:"reference/locks/share-template",id:"reference/locks/share-template",title:"Share a Lock Template",description:"Share a Lock Template as JSON.",source:"@site/docs/reference/locks/share-template.mdx",sourceDirName:"reference/locks",slug:"/reference/locks/share-template",permalink:"/BramblSc/docs/current/reference/locks/share-template",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Share a Lock Template",description:"Share a Lock Template as JSON."},sidebar:"referenceSidebar",previous:{title:"Share a LockAddress",permalink:"/BramblSc/docs/current/reference/locks/share-lock-addr"},next:{title:"Build a Transaction",permalink:"/BramblSc/docs/current/reference/transactions/"}},p={},s=[{value:"Encoding into JSON",id:"encoding-into-json",level:2},{value:"Decoding from JSON",id:"decoding-from-json",level:2},{value:"Example",id:"example",level:2}],m={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The SDK provides an easy way to share templates with other users using JSON. This is useful for initiating multi-participant\nconversations (advanced usage)."),(0,o.kt)("h2",{id:"encoding-into-json"},"Encoding into JSON"),(0,o.kt)("p",null,"You can encode a Lock Template into JSON using\nthe ",(0,o.kt)(r.Z,{path:"co/topl/brambl/codecs/LockTemplateCodecs$.html#encodeLockTemplate[F[_]](LockTemplate[F])(Monad[F]):Json",mdxType:"ScaladocLink"},(0,o.kt)("code",null,"encodeLockTemplate")),"\nfunction in the LockTemplateCodecs object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"def encodeLockTemplate[F[_]: Monad](\n  template: LockTemplate[F]\n): Json\n")),(0,o.kt)("p",null,"This function takes in a Lock template and returns a JSON representation of the template."),(0,o.kt)("p",null,"The parameters are as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"template"),": The Lock Template to encode.")),(0,o.kt)("p",null,"Type parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"F"),": The context, bound to a context parameter of type ",(0,o.kt)("inlineCode",{parentName:"li"},"Monad[F]"),", in which the template will be encoded.")),(0,o.kt)("h2",{id:"decoding-from-json"},"Decoding from JSON"),(0,o.kt)("p",null,"You can decode a JSON representation of a Lock Template back into the Lock Template instance using\nthe ",(0,o.kt)(r.Z,{path:"co/topl/brambl/codecs/LockTemplateCodecs$.html#decodeLockTemplate[F[_]](Json)(Monad[F]):Either[DecodingFailure,LockTemplate[F]]",mdxType:"ScaladocLink"},(0,o.kt)("code",null,"decodeLockTemplate")),"\nfunction in the LockTemplateCodecs object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"def decodeLockTemplate[F[_]: Monad](\n  template: Json\n): Either[DecodingFailure, LockTemplate[F]]\n")),(0,o.kt)("p",null,"This function takes in a JSON representation of a Lock template and returns the Lock template if possible. If it is not\npossible to decode the JSON into a Lock template, an error will be returned."),(0,o.kt)("p",null,"The parameters are as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"template"),": The JSON to decode into a Lock Template.")),(0,o.kt)("p",null,"Type parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"F"),": The context, bound to a context parameter of type ",(0,o.kt)("inlineCode",{parentName:"li"},"Monad[F]"),", in which the template will be decoded.")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"Using the ",(0,o.kt)("inlineCode",{parentName:"p"},"predicateTemplate")," and the context ",(0,o.kt)("inlineCode",{parentName:"p"},"IO")," from the ",(0,o.kt)("a",{parentName:"p",href:"./create-template#example"},"Lock Template example")," we can encode\nand decode to-and-from JSON."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.effect.IO\nimport co.topl.brambl.builders.locks.{LockTemplate, PropositionTemplate}\nimport co.topl.brambl.builders.locks.PropositionTemplate.SignatureTemplate\nimport co.topl.brambl.builders.locks.LockTemplate.PredicateTemplate\nimport co.topl.brambl.codecs.LockTemplateCodecs.{decodeLockTemplate, encodeLockTemplate}\nimport io.circe.{DecodingFailure, Json}\n\n\nval signatureTemplate: PropositionTemplate[IO] = SignatureTemplate[IO]("ExtendedEd25519", 0)\nval predicateTemplate: LockTemplate[IO] = PredicateTemplate[IO](Seq(signatureTemplate), 1)\n\n\n// Encode and decode starts here:\n// highlight-start\nval jsonTemplate: Json = encodeLockTemplate(predicateTemplate)\nval decodedTemplate: Either[DecodingFailure, LockTemplate[IO]] = decodeLockTemplate(jsonTemplate)\n// highlight-end\n')))}u.isMDXComponent=!0}}]);