"use strict";(self.webpackChunkbramblsc_documentation=self.webpackChunkbramblsc_documentation||[]).push([[33],{3905:(e,r,t)=>{t.d(r,{Zo:()=>d,kt:()=>k});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=n.createContext({}),s=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},d=function(e){var r=s(e.components);return n.createElement(i.Provider,{value:r},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(t),m=o,k=p["".concat(i,".").concat(m)]||p[m]||u[m]||a;return t?n.createElement(k,c(c({ref:r},d),{},{components:t})):n.createElement(k,c({ref:r},d))}));function k(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=m;var l={};for(var i in r)hasOwnProperty.call(r,i)&&(l[i]=r[i]);l.originalType=e,l[p]="string"==typeof e?e:o,c[1]=l;for(var s=2;s<a;s++)c[s]=t[s];return n.createElement.apply(null,c)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7884:(e,r,t)=>{t.d(r,{Z:()=>l});var n=t(7294),o=t(9960),a=t(6550),c=t(8084);function l(e){let{children:r,path:t}=e;var l=function(){const{pathname:e}=(0,a.TH)(),{versions:r}=(0,c.eZ)("docusaurus-plugin-content-docs");return r.find((r=>{let{path:t}=r;return e.startsWith(t)})).name||"current"}();return n.createElement(o.Z,{to:`/scaladoc/${l}/${t}`,target:"_blank"},r)}},8903:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>c,metadata:()=>i,toc:()=>d});var n=t(7462),o=(t(7294),t(3905)),a=t(7884);const c={sidebar_position:3,title:"Generate a LockAddress",description:"Create a Lock Address to encumber new UTXOs."},l=void 0,i={unversionedId:"reference/locks/create-lock-addr",id:"reference/locks/create-lock-addr",title:"Generate a LockAddress",description:"Create a Lock Address to encumber new UTXOs.",source:"@site/docs/reference/locks/create-lock-addr.mdx",sourceDirName:"reference/locks",slug:"/reference/locks/create-lock-addr",permalink:"/BramblSc/docs/current/reference/locks/create-lock-addr",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Generate a LockAddress",description:"Create a Lock Address to encumber new UTXOs."},sidebar:"referenceSidebar",previous:{title:"Generate a Lock",permalink:"/BramblSc/docs/current/reference/locks/build-lock"},next:{title:"Share a LockAddress",permalink:"/BramblSc/docs/current/reference/locks/share-lock-addr"}},s={},d=[{value:"Example",id:"example",level:2}],p={toc:d},u="wrapper";function m(e){let{components:r,...t}=e;return(0,o.kt)(u,(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You can generate a lock address for a given lock using\nthe ",(0,o.kt)(a.Z,{path:"co/topl/brambl/builders/TransactionBuilderApi.html#lockAddress(Lock):F[LockAddress]",mdxType:"ScaladocLink"},(0,o.kt)("code",null,"lockAddress")),"\nfunction of a Transaction Builder API instance. To obtain an instance of the Transaction Builder API, read about\n",(0,o.kt)("a",{parentName:"p",href:"../transactions#prerequisites"},"transaction building prerequisites"),". To obtain a Lock instance, ",(0,o.kt)("a",{parentName:"p",href:"./build-lock"},"learn how to generate a lock"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"def lockAddress(\n  lock: Lock\n): F[LockAddress]\n")),(0,o.kt)("p",null,"The parameters are as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"lock"),": The Lock for which to generate an address for.")),(0,o.kt)("p",null,"The resulting Lock Address can be used in a transaction."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"Using the ",(0,o.kt)("inlineCode",{parentName:"p"},"lockResult")," from the ",(0,o.kt)("a",{parentName:"p",href:"./build-lock#example"},"Lock example"),", and assuming the lock was built\nsuccessfully we can generate the LockAddress using the Transaction Builder."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.effect.IO\nimport co.topl.brambl.builders.{BuilderError, TransactionBuilderApi}\nimport co.topl.brambl.builders.locks.{LockTemplate, PropositionTemplate}\nimport co.topl.brambl.builders.locks.PropositionTemplate.SignatureTemplate\nimport co.topl.brambl.builders.locks.LockTemplate.PredicateTemplate\nimport co.topl.brambl.constants.NetworkConstants.{MAIN_LEDGER_ID, MAIN_NETWORK_ID}\nimport co.topl.brambl.models.LockAddress\nimport co.topl.brambl.models.box.Lock\nimport co.topl.brambl.syntax.cryptoToPbKeyPair\nimport co.topl.crypto.signing.ExtendedEd25519\nimport quivr.models.KeyPair\n\n\nval signatureTemplate: PropositionTemplate[IO] = SignatureTemplate[IO]("ExtendedEd25519", 0)\nval predicateTemplate: LockTemplate[IO] = PredicateTemplate[IO](Seq(signatureTemplate), 1)\n\n// Some mock key pair. Replace with your own.\nval someKeyPair: KeyPair = (new ExtendedEd25519).deriveKeyPairFromSeed(Array.fill(96)(0: Byte))\nval lockResult: IO[Either[BuilderError, Lock]] = predicateTemplate.build(List(someKeyPair.vk))\n\n// Generating LockAddress starts here:\nval transactionBuilderApi = TransactionBuilderApi.make[IO](MAIN_NETWORK_ID, MAIN_LEDGER_ID)\nval lockAddrResult: IO[LockAddress] = for {\n  // Assuming lockResult contains an Either.Right[Lock]\n  lock <- lockResult.map(_.toOption.get)\n  lockAddr <- transactionBuilderApi.lockAddress(lock)\n} yield lockAddr\n')))}m.isMDXComponent=!0}}]);