"use strict";(self.webpackChunkbramblsc_documentation=self.webpackChunkbramblsc_documentation||[]).push([[301],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>f});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=r.createContext({}),s=function(e){var t=r.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(a),d=n,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||l;return a?r.createElement(f,o(o({ref:t},p),{},{components:a})):r.createElement(f,o({ref:t},p))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:n,o[1]=i;for(var s=2;s<l;s++)o[s]=a[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},7884:(e,t,a)=>{a.d(t,{Z:()=>i});var r=a(7294),n=a(9960),l=a(6550),o=a(8084);function i(e){let{children:t,path:a}=e;var i=function(){const{pathname:e}=(0,l.TH)(),{versions:t}=(0,o.eZ)("docusaurus-plugin-content-docs");return t.find((t=>{let{path:a}=t;return e.startsWith(a)})).name||"current"}();return r.createElement(n.Z,{to:`/scaladoc/${i}/${a}`,target:"_blank"},t)}},3199:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var r=a(7462),n=(a(7294),a(3905)),l=a(7884);const o={sidebar_position:1,title:"Create a Wallet",description:"Create a new Wallet from scratch"},i=void 0,c={unversionedId:"reference/wallets/create",id:"reference/wallets/create",title:"Create a Wallet",description:"Create a new Wallet from scratch",source:"@site/docs/reference/wallets/create.mdx",sourceDirName:"reference/wallets",slug:"/reference/wallets/create",permalink:"/BramblSc/docs/current/reference/wallets/create",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Create a Wallet",description:"Create a new Wallet from scratch"},sidebar:"referenceSidebar",previous:{title:"Initialize a Wallet",permalink:"/BramblSc/docs/current/reference/wallets/"},next:{title:"Import a Wallet",permalink:"/BramblSc/docs/current/reference/wallets/import"}},s={},p=[{value:"Example",id:"example",level:2}],u={toc:p},m="wrapper";function d(e){let{components:t,...a}=e;return(0,n.kt)(m,(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Creating a wallet involves generating your Topl main key pair. This main key pair is used to derive all keys that a user would\nuse to create and prove transactions. You can create a new wallet using\nthe ",(0,n.kt)(l.Z,{path:"co/topl/brambl/wallet/WalletApi.html#createNewWallet(Array[Byte],Option[String],MnemonicSize):F[Either[WalletApiFailure,NewWalletResult[F]]]",mdxType:"ScaladocLink"},(0,n.kt)("code",null,"createNewWallet")),"\nfunction of a Wallet API instance."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},"def createNewWallet(\n  password:   Array[Byte],\n  passphrase: Option[String] = None,\n  mLen:       MnemonicSize = MnemonicSizes.words12\n): F[Either[WalletApi.WalletApiFailure, WalletApi.NewWalletResult[F]]]\n")),(0,n.kt)("p",null,"This function generates a Topl main key pair and encrypts it with the provided password."),(0,n.kt)("p",null,"The parameters are as follows:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"password"),": The password to encrypt the main key pair with"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"passphrase"),": An optional passphrase used to generate the main key pair. The default is no passphrase."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"mLen"),": The length of the mnemonic to generate. The default is 12 words.")),(0,n.kt)("p",null,"On success, this function returns\na ",(0,n.kt)(l.Z,{path:"co/topl/brambl/wallet/WalletApi$$NewWalletResult.html",mdxType:"ScaladocLink"},(0,n.kt)("code",null,"NewWalletResult")),"\nwhich contains the Topl main key pair encrypted into a ",(0,n.kt)("inlineCode",{parentName:"p"},"VaultStore")," instance, as well as the mnemonic which can be used\nto later import the derived Topl main key pair. On failure, this\nfunction returns\na ",(0,n.kt)(l.Z,{path:"co/topl/brambl/wallet/WalletApi$$WalletApiFailure.html",mdxType:"ScaladocLink"},(0,n.kt)("code",null,"WalletApiFailure")),"\nwhich specifies the reason for failure."),(0,n.kt)("admonition",{type:"caution"},(0,n.kt)("p",{parentName:"admonition"},"If you lose your ",(0,n.kt)("em",{parentName:"p"},"password"),", you can use your ",(0,n.kt)("em",{parentName:"p"},"passphrase")," and the generated mnemonic to recover your wallet (using import).\nIt is critical to store the used passphrase and the generated mnemonic in a safe place. If you lose either of these,\nyou will not be able to recover your wallet.")),(0,n.kt)("h2",{id:"example"},"Example"),(0,n.kt)("p",null,"The following example shows how to create a new wallet using the default of no passphrase and a mnemonic length of 12 words."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.effect.IO\nimport co.topl.brambl.wallet.WalletApi\nimport co.topl.brambl.servicekit.WalletKeyApi\n\nval walletApi = WalletApi.make[IO](WalletKeyApi.make())\nval newWalletResult = walletApi.createNewWallet("password".getBytes)\n')))}d.isMDXComponent=!0}}]);