"use strict";(self.webpackChunkbramblsc_documentation=self.webpackChunkbramblsc_documentation||[]).push([[33],{3905:(e,r,t)=>{t.d(r,{Zo:()=>d,kt:()=>m});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),i=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},d=function(e){var r=i(e.components);return n.createElement(s.Provider,{value:r},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},k=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=i(t),k=a,m=u["".concat(s,".").concat(k)]||u[k]||p[k]||o;return t?n.createElement(m,c(c({ref:r},d),{},{components:t})):n.createElement(m,c({ref:r},d))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,c=new Array(o);c[0]=k;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[u]="string"==typeof e?e:a,c[1]=l;for(var i=2;i<o;i++)c[i]=t[i];return n.createElement.apply(null,c)}return n.createElement.apply(null,t)}k.displayName="MDXCreateElement"},7884:(e,r,t)=>{t.d(r,{Z:()=>l});var n=t(7294),a=t(9960),o=t(6550),c=t(8084);function l(e){let{children:r,path:t}=e;var l=function(){const{pathname:e}=(0,o.TH)(),{versions:r}=(0,c.eZ)("docusaurus-plugin-content-docs");return r.find((r=>{let{path:t}=r;return e.startsWith(t)})).name||"current"}();return n.createElement(a.Z,{to:`/scaladoc/${l}/${t}`,target:"_blank"},r)}},8903:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>l,default:()=>k,frontMatter:()=>c,metadata:()=>s,toc:()=>d});var n=t(7462),a=(t(7294),t(3905)),o=t(7884);const c={sidebar_position:3,title:"Generate a LockAddress",description:"Create a Lock Address to encumber new UTXOs."},l=void 0,s={unversionedId:"reference/locks/create-lock-addr",id:"reference/locks/create-lock-addr",title:"Generate a LockAddress",description:"Create a Lock Address to encumber new UTXOs.",source:"@site/docs/reference/locks/create-lock-addr.mdx",sourceDirName:"reference/locks",slug:"/reference/locks/create-lock-addr",permalink:"/BramblSc/docs/current/reference/locks/create-lock-addr",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Generate a LockAddress",description:"Create a Lock Address to encumber new UTXOs."},sidebar:"referenceSidebar",previous:{title:"Generate a Lock",permalink:"/BramblSc/docs/current/reference/locks/build-lock"},next:{title:"Share a LockAddress",permalink:"/BramblSc/docs/current/reference/locks/share-lock-addr"}},i={},d=[{value:"Example",id:"example",level:2}],u={toc:d},p="wrapper";function k(e){let{components:r,...t}=e;return(0,a.kt)(p,(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"You can generate a lock address for a given lock using\nthe ",(0,a.kt)(o.Z,{path:"co/topl/brambl/builders/TransactionBuilderApi.html#lockAddress(Lock):F[LockAddress]",mdxType:"ScaladocLink"},(0,a.kt)("code",null,"lockAddress")),"\nfunction of a Transaction Builder API instance. To obtain an instance of the Transaction Builder API, read about\n",(0,a.kt)("a",{parentName:"p",href:"../transactions#prerequisites"},"transaction building prerequisites"),". To obtain a Lock instance, ",(0,a.kt)("a",{parentName:"p",href:"./build-lock"},"learn how to generate a lock"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"def lockAddress(\n  lock: Lock\n): F[LockAddress]\n")),(0,a.kt)("p",null,"The parameters are as follows:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"lock"),": The Lock for which to generate an address for.")),(0,a.kt)("p",null,"The resulting Lock Address can be used in a transaction."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"Using the ",(0,a.kt)("inlineCode",{parentName:"p"},"lockResult")," from the ",(0,a.kt)("a",{parentName:"p",href:"./build-lock#example"},"Lock example"),", and assuming the lock was built\nsuccessfully we can generate the LockAddress using the Transaction Builder."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import cats.effect.IO\nimport cats.data.EitherT\n\nval transactionBuilderApi = TransactionBuilderApi.make[IO](MAIN_NETWORK_ID, MAIN_LEDGER_ID)\nval lockAddrResult: IO[LockAddress] = for {\n  // Assuming lockResult contains an Either.Right[Lock]\n  lock <- lockResult.map(_.toOption.get)\n  lockAddr <- transactionBuilderApi.lockAddress(lock)\n} yield lockAddr\n")))}k.isMDXComponent=!0}}]);