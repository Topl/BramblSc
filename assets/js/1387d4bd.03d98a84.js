"use strict";(self.webpackChunkbramblsc_documentation=self.webpackChunkbramblsc_documentation||[]).push([[462],{3905:(e,r,n)=>{n.d(r,{Zo:()=>i,kt:()=>m});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function d(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=t.createContext({}),l=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):s(s({},r),e)),n},i=function(e){var r=l(e.components);return t.createElement(c.Provider,{value:r},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},k=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,i=d(e,["components","mdxType","originalType","parentName"]),p=l(n),k=a,m=p["".concat(c,".").concat(k)]||p[k]||u[k]||o;return n?t.createElement(m,s(s({ref:r},i),{},{components:n})):t.createElement(m,s({ref:r},i))}));function m(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=k;var d={};for(var c in r)hasOwnProperty.call(r,c)&&(d[c]=r[c]);d.originalType=e,d[p]="string"==typeof e?e:a,s[1]=d;for(var l=2;l<o;l++)s[l]=n[l];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}k.displayName="MDXCreateElement"},7884:(e,r,n)=>{n.d(r,{Z:()=>d});var t=n(7294),a=n(9960),o=n(6550),s=n(8084);function d(e){let{children:r,path:n}=e;var d=function(){const{pathname:e}=(0,o.TH)(),{versions:r}=(0,s.eZ)("docusaurus-plugin-content-docs");return r.find((r=>{let{path:n}=r;return e.startsWith(n)})).name||"current"}();return t.createElement(a.Z,{to:`/scaladoc/${d}/${n}`,target:"_blank"},r)}},5531:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>d,default:()=>k,frontMatter:()=>s,metadata:()=>c,toc:()=>i});var t=n(7462),a=(n(7294),n(3905)),o=n(7884);const s={sidebar_position:4,title:"Share a LockAddress",description:"Share a LockAddress as a Base58 encoded string."},d=void 0,c={unversionedId:"reference/locks/share-lock-addr",id:"reference/locks/share-lock-addr",title:"Share a LockAddress",description:"Share a LockAddress as a Base58 encoded string.",source:"@site/docs/reference/locks/share-lock-addr.mdx",sourceDirName:"reference/locks",slug:"/reference/locks/share-lock-addr",permalink:"/BramblSc/docs/current/reference/locks/share-lock-addr",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Share a LockAddress",description:"Share a LockAddress as a Base58 encoded string."},sidebar:"referenceSidebar",previous:{title:"Generate a LockAddress",permalink:"/BramblSc/docs/current/reference/locks/create-lock-addr"},next:{title:"Share a Lock Template",permalink:"/BramblSc/docs/current/reference/locks/share-template"}},l={},i=[{value:"Encoding into Base58",id:"encoding-into-base58",level:2},{value:"Decoding from Base58",id:"decoding-from-base58",level:2},{value:"Example",id:"example",level:2}],p={toc:i},u="wrapper";function k(e){let{components:r,...n}=e;return(0,a.kt)(u,(0,t.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The SDK provides an easy way to share Lock Addresses with other users using a Base58 encoding scheme. This is useful\nwhen you want to share a new address to receive funds."),(0,a.kt)("h2",{id:"encoding-into-base58"},"Encoding into Base58"),(0,a.kt)("p",null,"You can encode a Lock Address into Base58 using\nthe ",(0,a.kt)(o.Z,{path:"co/topl/brambl/codecs/AddressCodecs$.html#encodeAddress(LockAddress):String",mdxType:"ScaladocLink"},(0,a.kt)("code",null,"encodeAddress")),"\nfunction in the AddressCodecs object:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"def encodeAddress(\n  lockAddress: LockAddress\n): String\n")),(0,a.kt)("p",null,"This function takes in a Lock Address and returns it's Base58 string representation."),(0,a.kt)("p",null,"The parameters are as follows:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"lockAddress"),": The Lock Address to encode into Base58.")),(0,a.kt)("h2",{id:"decoding-from-base58"},"Decoding from Base58"),(0,a.kt)("p",null,"You can decode a Lock Address from Base58 using\nthe ",(0,a.kt)(o.Z,{path:"co/topl/brambl/codecs/AddressCodecs$.html#decodeAddress(String):Either[EncodingError,LockAddress]",mdxType:"ScaladocLink"},(0,a.kt)("code",null,"decodeAddress")),"\nfunction in the AddressCodecs object:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"def decodeAddress(\n  address: String\n): Either[EncodingError, LockAddress]\n")),(0,a.kt)("p",null,"This function takes in a Base58 encoded String and returns the corresponding Lock Address if possible. If it is not\npossible to decode the string into a Lock Address, an error will be returned."),(0,a.kt)("p",null,"The parameters are as follows:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"address"),": The Base58 string to decode into a Lock Address.")),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"Using the ",(0,a.kt)("inlineCode",{parentName:"p"},"lockAddrResult")," and the context ",(0,a.kt)("inlineCode",{parentName:"p"},"IO")," from the ",(0,a.kt)("a",{parentName:"p",href:"./create-lock-addr#example"},"LockAddress example")," we can encode\nand decode to-and-from Base58."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"val base58Addr: IO[String] = lockAddrResult.map(encodeAddress)\nval decodedAddr: IO[Either[EncodingError, LockAddress]] = base58Addr.map(decodeAddress)\n")))}k.isMDXComponent=!0}}]);